                      THE ORC PROGRAMMING LANGUAGE
                   STRUCTURED CONCURRENT PROGRAMMING

                   The University of Texas at Austin


                        INSTALL for orchard.zip


BUILDING, INSTALLING, AND RUNNING ORCHARD
-----------------------------------------

See also: https://orc.csres.utexas.edu/wiki/Wiki.jsp?page=HowToInstallOrchard


BEFORE BUILDING

To build this package from source, you will need the OrcJava, OrcSites,
and Website projects in Eclipse.

You will also need "orchard.properties" and "oauth.jks" files in the Orchard
project directory.  These are installation-specific, and contain some security-
sensitive data, so they are not provided in the distribution.  A
"sample.orchard.properties" is provided to get you started.  "oath.jks"
is your OAuth Java keystore.


TO BUILD & RUN THE MAC OS X STANDALONE DEMO APPLICATION

Do a "clean" build and then use the Ant target "demo-app" to build a
.tgz (gzip'ed tar) archive of the application.

Un-archive and run the Orchard Mac OS X app, and it will open your
default browser to a demo page running in an an embedded HTTP/servlet
server on your workstation, port 8080.


TO BUILD & RUN THE JAR'ED STANDALONE DEMO APPLICATION/SERVLETS

Do a "clean" build and then use the Ant target "zip" to build a
ZIP archive of the application with its required libraries.

Unpack the ZIP in the location of you choice.

Run the orc.OrchardDemo class, with the command:

    java -cp <path-to-Orc>/orc-2.1.1.jar:<path-to-Orc>/lib/\*:<path-to-OrcSites>/orc-sites-2.1.1.jar:<path-to-OrcSites>/lib/\*:orchard-2.1.1-demo.jar:lib/\* orc.OrchardDemo

This will open your default browser to a demo page running in an an
embedded HTTP/servlet server on your workstation, port 8080.

Alternatively, you can run the class orc.Orchard, with:

    java -cp <path-to-Orc>/orc-2.1.1.jar:<path-to-Orc>/lib/\*:<path-to-OrcSites>/orc-sites-2.1.1.jar:<path-to-OrcSites>/lib/\*:orchard-ÃŸ-demo.jar:lib/\* orc.Orchard

and it will run as a standalone Orchard Web application (servlet) in
an embedded HTTP/servlet server on your workstation, port 8081.


TO BUILD & DEPLOY THE WAR (WEB APPLICATION ARCHIVE)

Do a "clean" build and then use the Ant target "zip" to build a
ZIP archive of WAR file of the Orchard servlets and supporting
libraries.

The contents of this archive should be deployed on a servlet 2.5+
container of your choosing.

Note: You will need to tell your JAX-WS implementation and servlet
      container to use the same HTTP server.  For Jetty, you'll
      need its HTTP SPI JAR (see note below), and add the following
      to the Configure Server element of jetty.xml:

    <!-- Use Jetty as the Java HTTP server provider - JAX-WS uses this for Endpoint publishing -->
    <Call class="org.eclipse.jetty.http.spi.JettyHttpServerProvider" name="setServer">
        <Arg><Ref id="Server"/></Arg>
    </Call>

Note: The Jetty HTTP SPI JAR is _NOT_ found in Jetty's distribution,
      but in the Maven Central Repository at URL:
      http://central.maven.org/maven2/org/eclipse/jetty/jetty-http-spi/ 

      We've also included a subset of Jetty and its HTTP SPI module in
      the ZIP archive.

Logging, for Jetty:  Orc and Orchard use java.util.logging, and Jetty
has its own ...jetty.util.log interface. In our production environment,
we pass the JVM arguments (via JAVA_OPTIONS in /etc/default/jetty):
-Djava.util.logging.config.file=/opt/web/orc-base/etc/logging.properties
-Dorg.eclipse.jetty.util.log.class=orc.SyslogishJettyLogger
The logging.properties file referenced above sets up a ConsoleHandler
with our custom SyslogishFormatter, rather than Java's SimpleFormatter.
Note that these custom classes must be on the classpath before the
java.util.logging.LogManager.class and org.mortbay.log.Log classes are
initialized.  The Java formatter needs to be on the boot classpath if
it's referenced in the JVM's logging config file, since that's read at
JVM startup. The Jetty start.jar code does not reference
org.eclipse.jetty.util.log.Log, so the standard Jetty classloading
features, such as putting classfiles or JARs under jetty.home/lib/ext,
will work for the custom Jetty Logger.
