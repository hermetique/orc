
//
// Sites0Util.scala -- Scala traits and classes for 0-ary sites
// Project OrcScala
//
// AUTOGENERATED. Do not edit.
//
// Copyright (c) 2018 The University of Texas at Austin. All rights reserved.
//
// Use and redistribution of this file is governed by the license terms in
// the LICENSE file found in the project's top-level directory and also found at
// URL: http://orc.csres.utexas.edu/license.shtml .
//

package orc.values.sites

import scala.reflect.ClassTag

import orc.VirtualCallContext
import orc.SiteResponseSet
import orc.Invoker
import orc.OrcRuntime
import orc.DirectInvoker
import orc.error.runtime.HaltException
import orc.error.runtime.ArityMismatchException
import orc.error.runtime.ArgumentTypeMismatchException

import InvocationBehaviorUtilities._

trait Site0 extends Site with SpecificArity {
  val arity = 0
}

abstract class Site0Base extends HasGetInvoker0 with Site0 {
  /** Create an invoker which works for any instance of this Site class.
    *
    * exampleTarget should be this, examplesArguments should be the arguments
    * with the correct types for this invoker.
    */
  protected def invoker[T <: Site0Base]
        (exampleTarget: T)
        (_impl: (VirtualCallContext, T) => SiteResponseSet): Invoker = {
    new TargetClassAndArgumentClassSpecializedInvoker(exampleTarget, Array[Any]().asInstanceOf[Array[AnyRef]])
          with Site0Base.ImplInvoker[T] {
      val impl = _impl
    }
  }
}

object Site0Base {
  trait ImplInvoker[T] extends Invoker {
    val impl: (VirtualCallContext, T) => SiteResponseSet

    def invoke(ctx: VirtualCallContext, target: AnyRef, arguments: Array[AnyRef]): SiteResponseSet = {
      orc.run.StopWatches.implementation {
        impl(ctx, target.asInstanceOf[T])
      }
    }
  }
}

abstract class Site0Simple extends Site0Base {
  def eval(ctx: VirtualCallContext): SiteResponseSet

  final def getInvoker(runtime: OrcRuntime) =
    invoker(this) { (ctx, self) =>
      self.eval(ctx)
    }
}

trait PartialSite0 extends PartialSite with SpecificArity {
  val arity = 0
}

abstract class PartialSite0Base extends HasGetDirectInvoker0 with PartialSite0 {
  /** Create an invoker which works for any instance of this Site class.
    *
    * exampleTarget should be this, examplesArguments should be the arguments
    * with the correct types for this invoker.
    */
  protected def invoker[T <: PartialSite0Base]
        (exampleTarget: T)
        (_impl: (T) => Option[Any]): DirectInvoker = {
    new TargetClassAndArgumentClassSpecializedInvoker(exampleTarget, Array[Any]().asInstanceOf[Array[AnyRef]])
          with PartialSite0Base.ImplInvoker[T] {
      val impl = _impl
    }
  }
}

object PartialSite0Base {
  trait ImplInvoker[T] extends DirectInvoker {
    val impl: (T) => Option[Any]

    def invokeDirect(target: AnyRef, arguments: Array[AnyRef]): AnyRef = {
      (try {
        orc.run.StopWatches.implementation {
          impl(target.asInstanceOf[T])
        }
      } catch {
        case e: Exception =>
          throw new HaltException(e)
      }) match {
        case Some(v) => v.asInstanceOf[AnyRef]
        case None => throw new HaltException()
      }
    }
  }
}

abstract class PartialSite0Simple extends PartialSite0Base {
  def eval(): Option[Any]

  final def getInvoker(runtime: OrcRuntime) =
    invoker(this) { (self) =>
      self.eval()
    }
}

trait TotalSite0 extends TotalSite with SpecificArity {
  val arity = 0
}

abstract class TotalSite0Base extends HasGetDirectInvoker0 with TotalSite0 {
  /** Create an invoker which works for any instance of this Site class.
    *
    * exampleTarget should be this, examplesArguments should be the arguments
    * with the correct types for this invoker.
    */
  protected def invoker[T <: TotalSite0Base]
        (exampleTarget: T)
        (_impl: (T) => Any): DirectInvoker = {
    new TargetClassAndArgumentClassSpecializedInvoker(exampleTarget, Array[Any]().asInstanceOf[Array[AnyRef]])
          with TotalSite0Base.ImplInvoker[T] {
      val impl = _impl
    }
  }
}

object TotalSite0Base {
  trait ImplInvoker[T] extends DirectInvoker {
    val impl: (T) => Any

    def invokeDirect(target: AnyRef, arguments: Array[AnyRef]): AnyRef = {
      try {
        orc.run.StopWatches.implementation {
          impl(target.asInstanceOf[T]).asInstanceOf[AnyRef]
        }
      } catch {
        case e: Exception =>
          throw new HaltException(e)
      }
    }
  }
}

abstract class TotalSite0Simple extends TotalSite0Base {
  def eval(): Any

  final def getInvoker(runtime: OrcRuntime) =
    invoker(this) { (self) =>
      self.eval()
    }
}

abstract class HasGetInvoker0 {
  val argumentTypeStrings = Array()
  final def getInvoker(runtime: OrcRuntime, args: Array[AnyRef]): Invoker = {
    if (args.length != 0) {
      new TargetClassAndArgumentClassSpecializedInvoker(this, args) with DirectInvoker {
        @throws[Throwable]
        def invokeDirect(target: AnyRef, arguments: Array[AnyRef]): AnyRef = {
          throw new ArityMismatchException(0, args.size)
        }
      }
    }  else {
      getInvoker(runtime)
    }
  }

  def getInvoker(runtime: OrcRuntime): Invoker
}

abstract class HasGetDirectInvoker0 {
  val argumentTypeStrings = Array()
  final def getInvoker(runtime: OrcRuntime, args: Array[AnyRef]): DirectInvoker = {
    if (args.length != 0) {
      new TargetClassAndArgumentClassSpecializedInvoker(this, args) with DirectInvoker {
        @throws[Throwable]
        def invokeDirect(target: AnyRef, arguments: Array[AnyRef]): AnyRef = {
          throw new ArityMismatchException(0, args.size)
        }
      }
    }  else {
      getInvoker(runtime)
    }
  }

  def getInvoker(runtime: OrcRuntime): DirectInvoker
}

